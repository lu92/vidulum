package com.multi.vidulum.trading.domain;

import com.multi.vidulum.common.*;
import com.multi.vidulum.portfolio.domain.portfolio.PortfolioId;
import com.multi.vidulum.shared.ddd.Aggregate;
import lombok.Builder;
import lombok.Data;

import java.time.ZonedDateTime;

@Data
@Builder
public class Trade implements Aggregate<TradeId, TradeSnapshot> {
    TradeId tradeId;
    UserId userId;
    PortfolioId portfolioId;
    OriginTradeId originTradeId; // generated by exchange
    SubName subName;
    Symbol symbol;
    Side side;
    Quantity quantity;
    Price price;
    Fee fee;
    ExchangeRate exchangeCurrencyRate;
    Money localValue; // value expressed in local currency [reference to price's currency]
    Money value; // value expressed in original currency of portfolio
    Money totalValue; // value + totalFee
    ZonedDateTime dateTime;

    @Override
    public TradeSnapshot getSnapshot() {

        return new TradeSnapshot(
                tradeId,
                userId,
                portfolioId,
                originTradeId,
                symbol,
                subName,
                side,
                quantity,
                price,
                new TradeSnapshot.FeeSnapshot(
                        fee.exchangeCurrencyFee(),
                        fee.transactionFee(),
                        fee.totalFee()),
                exchangeCurrencyRate,
                localValue,
                value,
                totalValue,
                dateTime
        );
    }

    public static Trade from(TradeSnapshot snapshot) {
        return Trade.builder()
                .tradeId(snapshot.getTradeId())
                .userId(snapshot.getUserId())
                .portfolioId(snapshot.getPortfolioId())
                .originTradeId(snapshot.getOriginTradeId())
                .symbol(snapshot.getSymbol())
                .subName(snapshot.getSubName())
                .side(snapshot.getSide())
                .quantity(snapshot.getQuantity())
                .price(snapshot.getPrice())
                .fee(new Fee(
                        snapshot.getFee().exchangeCurrencyFee(),
                        snapshot.getFee().transactionFee(),
                        snapshot.getFee().totalFee()))
                .exchangeCurrencyRate(snapshot.getExchangeCurrencyRate())
                .localValue(snapshot.getLocalValue())
                .value(snapshot.getValue())
                .totalValue(snapshot.getTotalValue())
                .dateTime(snapshot.getDateTime())
                .build();
    }

    public record Fee(
            Money exchangeCurrencyFee,
            Money transactionFee,
            Money totalFee) {}
}
